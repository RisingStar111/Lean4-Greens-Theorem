import Mathlib.Tactic

#allow_unused_tactic Lean.Parser.Tactic.done

namespace Green

example (p q : Prop) (hpq : p âˆ§ q) : q âˆ§ p := by
  -- exact id (And.symm hpq)
  ---- this lemma exists and `exact?` finds it for us
  constructor  -- splits the `and` in the goal into two separate goals
  Â· cases hpq  -- place the cursor at the end of `hpq`, wait for ðŸ’¡ to appear and click on it!
    assumption
  Â· cases hpq
    assumption
  done

example (a b : Real) (hab : a < b) : Set.Icc b a = âˆ… := by
    apply Set.Icc_eq_empty_of_lt
    assumption
    done

example (a b : Real) : âˆ« _ in a..b, 1 = b - a  := by
    rewrite [<- mul_one (b - a)]
    apply intervalIntegral.integral_const
    done

example (a b : Real) : âˆ« _ in a..b, 1 = b - a  := by
    apply intervalIntegral.integral_deriv_eq_sub'
    Â· exact deriv_id'
    Â· exact fun x a â†¦ differentiableAt_id'
    Â· exact continuousOn_const
    done

example (a b c : Real) (h : c â‰  0) : c*a = c*b â†’ a = b := by
    apply mul_left_cancelâ‚€
    apply h

example (a b : Real) : âˆ« _ in a..b, 2 = 2*(b - a)  := by
    rewrite (occs := .pos [1]) [<- one_mul 2, intervalIntegral.integral_mul_const, mul_comm]
    rw [mul_left_cancel_iff_of_pos]
    apply intervalIntegral.integral_deriv_eq_sub'
    Â· apply deriv_eq
      intro x
      exact hasDerivAt_id' x
    Â· exact fun x a â†¦ differentiableAt_id'
    Â· exact continuousOn_const
    apply zero_lt_two
    done

example (a b : Real) : âˆ« _ in a..b, 2 = 2*(b - a)  := by
    rw [mul_sub_left_distrib]
    apply intervalIntegral.integral_deriv_eq_sub'
    Â· apply deriv_eq
      intro x -- idk how refine works, everything above has gone to great effort to avoid it (and simp since it just solves them) cuz it just breaks
      apply?
    Â· apply?
    Â· exact continuousOn_const
    done
